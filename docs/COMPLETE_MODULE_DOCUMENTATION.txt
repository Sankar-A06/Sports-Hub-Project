SPORTS SCHEDULER WEB APP - COMPLETE MODULE DOCUMENTATION
========================================================

SYSTEM ARCHITECTURE OVERVIEW
============================
The Sports Scheduler Web App is a full-stack application built with:
- Frontend: HTML5, CSS3, JavaScript (Vanilla)
- Backend: Node.js, Express.js
- Database: MongoDB with Mongoose ODM
- Authentication: JWT (JSON Web Tokens)
- Security: bcrypt for password hashing

DATABASE DESIGN
===============

1. USER MODEL
-------------
Schema:
{
  name: String (required),
  email: String (required, unique),
  password: String (required, hashed),
  role: String (enum: ['player', 'admin'], default: 'player'),
  createdAt: Date (default: Date.now)
}

Features:
- Password hashing with bcrypt (12 rounds)
- Email uniqueness validation
- Role-based access control
- Password comparison method
- Pre-save middleware for password hashing

2. SPORT MODEL
--------------
Schema:
{
  name: String (required),
  createdBy: ObjectId (ref: 'User', required),
  createdAt: Date (default: Date.now)
}

Features:
- Admin-only creation
- Creator tracking
- Population with user details
- Reference to User model

3. SESSION MODEL
----------------
Schema:
{
  sport: ObjectId (ref: 'Sport', required),
  createdBy: ObjectId (ref: 'User', required),
  team1Players: [String],
  team2Players: [String],
  additionalPlayersNeeded: Number (required),
  date: Date (required),
  venue: String (required),
  description: String (default: ''),
  skillLevel: String (enum: ['beginner', 'intermediate', 'advanced']),
  maxPlayers: Number (required),
  joinedPlayers: [{
    user: ObjectId (ref: 'User'),
    joinedAt: Date (default: Date.now),
    team: String (enum: ['team1', 'team2', 'unassigned'])
  }],
  invitedPlayers: [{
    email: String,
    invitedAt: Date (default: Date.now),
    status: String (enum: ['pending', 'accepted', 'declined'])
  }],
  status: String (enum: ['active', 'cancelled', 'completed']),
  cancellationReason: String,
  createdAt: Date (default: Date.now)
}

Features:
- Complex session management
- Team organization
- Player invitation system
- Session status tracking
- Conflict prevention
- Multiple references to User and Sport models

BACKEND MODULES
===============

1. AUTHENTICATION MODULE (/routes/auth.js)
==========================================

Endpoints:
- POST /api/auth/signup - User registration
- POST /api/auth/signin - User login
- POST /api/auth/change-password - Password change
- GET /api/auth/profile - Get user profile
- PUT /api/auth/profile - Update user profile
- POST /api/auth/forgot-password - Password reset request
- POST /api/auth/reset-password - Password reset with token

Features:
- Input validation with express-validator
- Password hashing with bcrypt
- JWT token generation (24h expiry)
- Role-based access control
- Secure password reset flow
- Profile management
- Email uniqueness checking
- Comprehensive error handling

Signup Process:
1. Validate input (name, email, password)
2. Check if user already exists
3. Create new user with hashed password
4. Generate JWT token
5. Return user data and token

Signin Process:
1. Validate email and password
2. Find user by email
3. Compare password with hashed version
4. Generate JWT token
5. Return user data and token

Password Change Process:
1. Verify current password
2. Hash new password
3. Update user record
4. Return success message

2. SPORTS MANAGEMENT MODULE (/routes/sports.js)
===============================================

Endpoints:
- GET /api/sports - Get all sports
- POST /api/sports - Create sport (Admin only)
- DELETE /api/sports/:id - Delete sport (Admin only)
- DELETE /api/sports/cleanup/duplicates - Clean duplicate sports

Features:
- Admin-only sport creation
- Duplicate detection and cleanup
- Population with creator information
- Comprehensive error handling
- Input validation

Sports Retrieval:
1. Find all sports
2. Populate creator information
3. Return sports array

Sport Creation (Admin Only):
1. Validate admin role
2. Validate sport name
3. Create sport with creator reference
4. Populate and return sport data

Duplicate Cleanup:
1. Group sports by name
2. Keep first occurrence of each name
3. Delete duplicates
4. Return cleanup statistics

3. SESSION MANAGEMENT MODULE (/routes/sessions.js)
==================================================

Endpoints:
- GET /api/sessions - Get all active sessions
- POST /api/sessions - Create new session
- POST /api/sessions/:id/join - Join session
- POST /api/sessions/:id/cancel - Cancel session
- GET /api/sessions/user/sessions - Get user's sessions
- GET /api/sessions/area/:location - Filter by location
- GET /api/sessions/sport/:sportId - Filter by sport
- POST /api/sessions/:id/invite - Invite players
- GET /api/sessions/user/activity - User activity stats

Features:
- Session conflict prevention (2-hour window)
- Team management
- Player invitation system
- Location and sport filtering
- Activity tracking and statistics
- Comprehensive validation
- Date validation (future dates only)
- Capacity management

Session Creation Process:
1. Validate all required fields
2. Check if sport exists
3. Validate date is in future
4. Check for session conflicts (2-hour window)
5. Create session with populated data
6. Return created session

Join Session Process:
1. Find session by ID
2. Check session status and date
3. Verify user hasn't already joined
4. Check session capacity
5. Check for conflicts with other sessions
6. Add user to joinedPlayers array
7. Return updated session

Session Cancellation:
1. Verify user is session creator
2. Update session status to 'cancelled'
3. Add cancellation reason
4. Return success message

4. ADMIN MODULE (/routes/admin.js)
==================================

Endpoints:
- GET /api/admin/reports - Generate reports

Features:
- Date-range filtering
- Sport statistics
- Session analytics
- Player participation metrics
- Admin-only access

Report Generation Process:
1. Validate admin role
2. Apply date filters if provided
3. Query sessions with population
4. Calculate statistics by sport
5. Return comprehensive report data

Report Data Includes:
- Total sessions count
- Sessions per sport
- Total players per sport
- Average players per session
- Date range information

5. MIDDLEWARE (/middleware/auth.js)
==================================

Functions:
- authenticateToken - JWT verification
- requireAdmin - Admin role verification

Features:
- Token extraction from Authorization header
- JWT verification and decoding
- User context injection into request
- Role-based access control
- Error handling for invalid tokens

Authentication Middleware Process:
1. Extract token from Authorization header
2. Verify JWT signature
3. Decode token payload
4. Attach user info to request object
5. Continue to next middleware

Admin Middleware Process:
1. Check if user role is 'admin'
2. Return 403 if not admin
3. Continue to next middleware if admin

6. DATABASE CONFIGURATION (/config/database.js)
==============================================

Features:
- MongoDB Atlas and local connection support
- Connection pooling
- SSL/TLS configuration
- Error handling and retry logic
- Graceful shutdown handling
- Connection event listeners
- Timeout configurations

Connection Process:
1. Parse MongoDB URI from environment
2. Configure connection options
3. Handle Atlas-specific SSL settings
4. Set up connection pooling
5. Connect to database
6. Set up event listeners
7. Handle graceful shutdown

FRONTEND MODULES
================

1. AUTHENTICATION SYSTEM (/js/script.js)
========================================

Functions:
- handleSignIn() - User login
- handleSignUp() - User registration
- handleChangePassword() - Password change
- handleForgotPassword() - Password reset request
- handleResetPassword() - Password reset
- checkAuthStatus() - Check authentication status
- signOut() - User logout

Features:
- Form validation
- Token storage in localStorage
- User session management
- Role-based UI updates
- Error handling with toast notifications
- Automatic UI updates on auth state change

Authentication Flow:
1. Validate form inputs
2. Send API request
3. Store token and user data
4. Update UI based on user role
5. Show success/error messages

2. SESSION MANAGEMENT (/js/script.js)
=====================================

Functions:
- showCreateSessionForm() - Open create session modal
- handleCreateSession() - Create new session
- joinSession() - Join existing session
- handleCancelSession() - Cancel session
- loadSessions() - Load all sessions
- loadUserSessions() - Load user's sessions
- createSessionCard() - Create session display card

Features:
- Dynamic sports dropdown population
- Session conflict prevention
- Real-time session updates
- Team management
- Form validation
- Modal management

Session Creation Process:
1. Check authentication
2. Load sports if not already loaded
3. Show create session modal
4. Validate form inputs
5. Send creation request
6. Update UI with new session
7. Close modal

3. SPORTS MANAGEMENT (/js/script.js)
====================================

Functions:
- loadSports() - Load all sports
- updateSportsDropdown() - Populate dropdowns
- handleCreateSport() - Create new sport (Admin)
- updateSportsList() - Update sports display

Features:
- Unique sports filtering
- Alphabetical sorting
- Dynamic dropdown updates
- Admin-only creation
- Duplicate prevention in UI

Sports Loading Process:
1. Fetch sports from API
2. Store in global sports array
3. Update create session dropdown
4. Update filter dropdown
5. Update admin sports list

4. UI MANAGEMENT (/js/script.js)
=================================

Functions:
- showSection() - Navigate between sections
- updateUIForAuthenticatedUser() - Update UI for logged-in users
- updateUIForGuest() - Update UI for guests
- showToast() - Display notifications
- showLoading() - Show loading spinner
- toggleMobileMenu() - Mobile menu toggle

Features:
- Responsive navigation
- Dynamic content loading
- Toast notifications
- Loading states
- Mobile-friendly interface
- Role-based navigation

UI Update Process:
1. Check authentication status
2. Show/hide navigation elements based on role
3. Update user information display
4. Load appropriate section data
5. Handle mobile menu state

5. ACTIVITY TRACKING (/js/script.js)
====================================

Functions:
- loadUserActivity() - Load user statistics
- updateActivityStats() - Update activity counters
- updateRecentActivity() - Show recent activity

Features:
- Session statistics
- Activity history
- Performance metrics
- Recent activity display
- User engagement tracking

Activity Loading Process:
1. Fetch user activity data
2. Calculate statistics
3. Update activity counters
4. Display recent activity list
5. Sort by date (most recent first)

SECURITY FEATURES
=================

1. AUTHENTICATION & AUTHORIZATION
=================================
- JWT tokens with 24-hour expiry
- Password hashing with bcrypt (12 rounds)
- Role-based access control (Player/Admin)
- Token validation middleware
- Secure token storage in localStorage

2. INPUT VALIDATION
==================
- Server-side validation with express-validator
- Client-side form validation
- SQL injection prevention (MongoDB ODM)
- XSS protection
- Email format validation
- Password strength requirements

3. SESSION SECURITY
==================
- Session conflict prevention
- User authentication for all operations
- Admin-only operations protection
- Secure password reset flow
- Token-based authentication
- Role-based route protection

KEY FEATURES
============

1. SESSION MANAGEMENT
====================
- Create, join, and cancel sessions
- Team organization
- Player invitation system
- Conflict prevention (2-hour window)
- Status tracking (active, cancelled, completed)
- Capacity management
- Date validation

2. USER MANAGEMENT
==================
- Registration and authentication
- Profile management
- Password reset functionality
- Role-based access (Player/Admin)
- Session persistence
- User activity tracking

3. SPORTS MANAGEMENT
====================
- Admin-only sport creation
- Duplicate detection and cleanup
- Dynamic dropdown population
- Sport filtering
- Creator tracking

4. ACTIVITY TRACKING
====================
- User statistics
- Session history
- Performance metrics
- Recent activity display
- Engagement analytics

5. ADMIN FEATURES
=================
- Report generation
- Sport management
- User analytics
- System administration
- Date-range filtering
- Comprehensive statistics

API ENDPOINTS SUMMARY
=====================

AUTHENTICATION MODULE:
- POST /api/auth/signup - User registration
- POST /api/auth/signin - User login
- POST /api/auth/change-password - Change password
- GET /api/auth/profile - Get profile
- PUT /api/auth/profile - Update profile
- POST /api/auth/forgot-password - Request password reset
- POST /api/auth/reset-password - Reset password

SPORTS MODULE:
- GET /api/sports - Get all sports
- POST /api/sports - Create sport (Admin only)
- DELETE /api/sports/:id - Delete sport (Admin only)
- DELETE /api/sports/cleanup/duplicates - Clean duplicates

SESSIONS MODULE:
- GET /api/sessions - Get all sessions
- POST /api/sessions - Create session
- POST /api/sessions/:id/join - Join session
- POST /api/sessions/:id/cancel - Cancel session
- GET /api/sessions/user/sessions - User sessions
- GET /api/sessions/user/activity - User activity
- GET /api/sessions/area/:location - Filter by location
- GET /api/sessions/sport/:sportId - Filter by sport
- POST /api/sessions/:id/invite - Invite players

ADMIN MODULE:
- GET /api/admin/reports - Generate reports

FILE STRUCTURE
==============

Backend Structure:
- /backend/
  - /config/
    - database.js - MongoDB connection
  - /middleware/
    - auth.js - Authentication middleware
  - /models/
    - index.js - Database models
  - /routes/
    - auth.js - Authentication routes
    - sports.js - Sports management routes
    - sessions.js - Session management routes
    - admin.js - Admin panel routes
  - server.js - Main server file
  - package.json - Backend dependencies

Frontend Structure:
- /frontend/
  - /css/
    - styles.css - Main stylesheet
    - activity-styles.css - Activity page styles
  - /js/
    - script.js - Main frontend logic
  - /assets/ - Static assets
  - index.html - Main HTML file

Documentation:
- /docs/
  - README.md - Project documentation
  - PROJECT_STRUCTURE.md - File organization
  - MONGODB_SETUP.md - Database setup
  - MONGODB_ATLAS_SETUP.md - Cloud database setup
  - COMPLETE_MODULE_DOCUMENTATION.txt - This file

DEPLOYMENT CONSIDERATIONS
=========================

Environment Variables:
- MONGODB_URI - MongoDB connection string
- JWT_SECRET - JWT signing secret
- PORT - Server port (default: 5000)

Production Requirements:
- MongoDB Atlas or MongoDB instance
- Node.js runtime
- Environment variable configuration
- SSL/TLS for production
- Error logging and monitoring

Security Considerations:
- Use strong JWT secrets
- Enable HTTPS in production
- Implement rate limiting
- Add input sanitization
- Use environment variables for secrets
- Implement proper error handling

This comprehensive system provides a complete sports scheduling platform with robust authentication, session management, and administrative capabilities suitable for production deployment.
